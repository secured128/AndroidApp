package com.jmasters.common.utils.security;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.math.BigInteger;
import java.security.InvalidKeyException;
import java.security.Key;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.SecureRandom;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.RSAPrivateKeySpec;
import java.security.spec.RSAPublicKeySpec;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;

import com.jmasters.common.utils.StringUtils;
import com.jmasters.common.utils.IoUtils;

/**
 * Uses RSA algorithm
 * 
 * @author alexb
 * 
 */
public class AsymmetricEncryptionUtil {
	/**
	 * generates a RSA KeyPair
	 * 
	 * @return
	 * @throws NoSuchAlgorithmException
	 * @throws NoSuchProviderException
	 */
	public static KeyPair generateKeyPair(int keysize) throws NoSuchAlgorithmException, NoSuchProviderException {
		KeyPairGenerator keyGen = KeyPairGenerator.getInstance("RSA");
		SecureRandom random = SecureRandom.getInstance("SHA1PRNG", "SUN");
		keyGen.initialize(keysize, random);
		KeyPair pair = keyGen.generateKeyPair();
		return pair;
	}

	/**
	 * saves a RSA KeyPair generated by generateKeyPair() method
	 * 
	 * @param keyPair
	 * @param publicKeyFile
	 * @param privateKeyFile
	 * @throws NoSuchAlgorithmException
	 * @throws InvalidKeySpecException
	 * @throws IOException
	 */
	public static void saveKeyPairToFiles(KeyPair keyPair, File publicKeyFile, File privateKeyFile)
			throws NoSuchAlgorithmException, InvalidKeySpecException, IOException {
		KeyFactory fact = KeyFactory.getInstance("RSA");
		RSAPublicKeySpec pub = fact.getKeySpec(keyPair.getPublic(), RSAPublicKeySpec.class);
		RSAPrivateKeySpec priv = fact.getKeySpec(keyPair.getPrivate(), RSAPrivateKeySpec.class);
		saveToFile(publicKeyFile.getAbsolutePath(), pub.getModulus(), pub.getPublicExponent());
		saveToFile(privateKeyFile.getAbsolutePath(), priv.getModulus(), priv.getPrivateExponent());
	}

	public static void saveToFile(String fileName, BigInteger mod, BigInteger exp) throws IOException {
		ObjectOutputStream out = new ObjectOutputStream(new BufferedOutputStream(new FileOutputStream(fileName)));
		try {
			out.writeObject(mod);
			out.writeObject(exp);
		} catch (Exception e) {
			throw new IOException("Unexpected error", e);
		} finally {
			out.close();
		}
	}

	public static PublicKey readPublicKey(File keyFile) throws IOException {
		InputStream keyFileIs = new FileInputStream(keyFile);
		return readPublicKey(keyFileIs);
	}

	public static PublicKey readPublicKey(String keyFileName, Class resourceLocation) throws IOException {
		InputStream in = resourceLocation.getResourceAsStream(keyFileName);
		return readPublicKey(in);
	}

	public static PublicKey readPublicKey(InputStream keyInputStream) throws IOException {
		ObjectInputStream oin = new ObjectInputStream(new BufferedInputStream(keyInputStream));
		try {
			BigInteger m = (BigInteger) oin.readObject();
			BigInteger e = (BigInteger) oin.readObject();
			RSAPublicKeySpec keySpec = new RSAPublicKeySpec(m, e);
			KeyFactory fact = KeyFactory.getInstance("RSA");
			PublicKey pubKey = fact.generatePublic(keySpec);
			return pubKey;
		} catch (Exception e) {
			throw new RuntimeException("Spurious serialisation error", e);
		} finally {
			oin.close();
		}
	}

	public static PrivateKey readPrivateKey(File keyFile) throws IOException {
		InputStream keyFileIs = new FileInputStream(keyFile);
		return readPrivateKey(keyFileIs);
	}

	public static PrivateKey readPrivateKey(String keyFileName, Class resourceLocation) throws IOException {
		InputStream in = resourceLocation.getResourceAsStream(keyFileName);
		return readPrivateKey(in);
	}

	public static PrivateKey readPrivateKey(InputStream keyInputStream) throws IOException {
		ObjectInputStream oin = new ObjectInputStream(new BufferedInputStream(keyInputStream));
		try {
			BigInteger m = (BigInteger) oin.readObject();
			BigInteger e = (BigInteger) oin.readObject();
			RSAPrivateKeySpec keySpec = new RSAPrivateKeySpec(m, e);
			KeyFactory fact = KeyFactory.getInstance("RSA");
			PrivateKey privKey = fact.generatePrivate(keySpec);
			return privKey;
		} catch (Exception e) {
			throw new RuntimeException("Spurious serialisation error", e);
		} finally {
			oin.close();
		}
	}

	public static byte[] encrypt(byte[] data, Key key) throws IllegalBlockSizeException, BadPaddingException,
			NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {
		return encryptDecript(data, key, Cipher.ENCRYPT_MODE);
	}

	public static byte[] decript(byte[] data, Key key) throws IllegalBlockSizeException, BadPaddingException,
			NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {
		return encryptDecript(data, key, Cipher.DECRYPT_MODE);
	}

	private static byte[] encryptDecript(byte[] data, Key key, int mode) throws IllegalBlockSizeException,
			BadPaddingException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {
		Cipher cipher = Cipher.getInstance("RSA");
		cipher.init(mode, key);
		byte[] cipherData = cipher.doFinal(data);
		return cipherData;
	}

	public static void main(String[] args) throws InvalidKeyException, IllegalBlockSizeException, BadPaddingException,
			NoSuchPaddingException {
		try {

			// KeyPair pair = null;
			// try {
			// pair = generateKeyPair(1024);
			// } catch (NoSuchAlgorithmException e) {
			// // TODO Auto-generated catch block
			// e.printStackTrace();
			// } catch (NoSuchProviderException e) {
			// // TODO Auto-generated catch block
			// e.printStackTrace();
			// }
			//
			// System.out.println("private : " + pair.getPrivate().toString());
			// System.out.println("public : " + pair.getPublic().toString());
			//
			// System.out.println(StringUtils.toBase64String("alex"));

			File pubKeyFile = new File("d:/temp/pub.key");
			File privKeyFile = new File("d:/temp/prv.key");
			//
			// saveKeyPairToFiles(pair, pubKeyFile, privKeyFile);

			PublicKey publicKey = readPublicKey(pubKeyFile);
			PrivateKey privateKey = readPrivateKey(privKeyFile);

			// System.out.println("privateKey : " + privateKey.toString());

			byte[] input = "kuku".getBytes();
			byte[] output = encrypt(input, publicKey);

			System.out.println("input : " + new String(input));
			System.out.println("encripted : " + StringUtils.toBase64String(output));

			byte[] decripted = decript(output, privateKey);

			System.out.println("decripted : " + new String(decripted));

			byte[] privateKeyBytes = IoUtils.readBinaryFile(privKeyFile);
			System.out.println(StringUtils.toBase64String(privateKeyBytes));

		} catch (Throwable e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}
}
